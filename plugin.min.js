/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('autocite', function(editor) {
	if (proofReviewType == 'author'){return;}
	var AutoUrlDetectState,changedNode,autoCiteTriggered = false,autoCiteKeyPressed = true,getprenode,prenodecloned,buildspan, selectedFigArr = {};
	
	/*editor.on("keydown", function(e) {
		if (e.keyCode == 13) {
			return handleEnter(editor);
		}
	});*/
	// Internet Explorer has built-in automatic linking for most cases
	if (tinymce.Env.ie) {
		editor.on("focus", function() {
			if (!AutoUrlDetectState) {
				AutoUrlDetectState = true;

				try {
					editor.execCommand('AutoUrlDetect', false, true);
				} catch (ex) {
					// Ignore
				}
			}
		});

		return;
	}

	editor.on("copy", function(e) {
		var originalElement = editor.selection.getNode();
		matches = originalElement.attributes.class.textContent.match(/(Fig|Vid|Tab|ima|Bib|sch|chart|box)Ref/gi);
			if ((!matches) && (originalElement.parentElement) && (originalElement.parentElement.attributes) && (originalElement.parentElement.attributes.class)){
				matches = originalElement.parentElement.attributes.class.textContent.match(/(Fig|Vid|Bib|Tab|ima|sch|chart|box)Ref/gi);
				originalElement = originalElement.parentElement;
			}
			if ((matches) && ($(originalElement).text() == editor.selection.getContent())){
				e.clipboardData.setData('text/html', $(originalElement)[0].outerHTML);
				e.preventDefault();
			}
	})
	
	editor.on("keydown", function(e) {
		if (e.keyCode == 41) {
			return handleEclipse(editor);
		}
		var originalElement = editor.selection.getNode();
		var keycode = e.keyCode;
		var valid = 
		(keycode > 47 && keycode < 58)   || // number keys
        keycode == 32 || keycode == 13   || // spacebar & return key(s) (if you want to allow carriage returns)
        (keycode > 64 && keycode < 91)   || // letter keys
        (keycode > 95 && keycode < 112)  || // numpad keys
        (keycode > 185 && keycode < 193) || // ;=,-./` (in order)
        (keycode > 218 && keycode < 223);
		matches = false;
		if (valid){
			if (originalElement.attributes.class){
				matches = originalElement.attributes.class.textContent.match(/(Fig|Vid|Tab|ima|Bib|sch|chart|box)Ref/gi);
			}
			if ((!matches) && (originalElement.parentElement) && (originalElement.parentElement.attributes) && (originalElement.parentElement.attributes.class)){
				matches = originalElement.parentElement.attributes.class.textContent.match(/(Fig|Vid|Bib|Tab|ima|sch|chart|box)Ref/gi);
				originalElement = originalElement.parentElement;
			}
			if (matches){
				var sel = rangy.getSelection(); 
				var range = sel.getRangeAt(0); 
				if (sel.text() == ''){
					var preCaretRange = range.cloneRange();
					preCaretRange.selectNodeContents(originalElement);
					preCaretRange.setEnd(range.endContainer, range.endOffset);
					caretOffset = preCaretRange.toString().length;
					if (caretOffset == originalElement.textContent.length){
						//range.setStartAfter(sel.anchorNode.parentNode);
						range.setStartAfter(originalElement);
						rangy.getSelection().setSingleRange(range); 
					}
				}
			}
		}
	});

	editor.on("keyup", function(e) {
		if(autoCiteTriggered){
			return handleSpacebar(editor, e);
		}
		if ((e.keyCode == 32) || (e.keyCode == 188) || (e.keyCode == 221) || ((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105))) {
			return handleSpacebar(editor, e);
		}
		if ((autoCiteKeyPressed) && (e.keyCode >= 65 && e.keyCode <= 90)) {
			return handleSpacebar(editor, e);
		}
		if (e.keyCode == 8 || e.keyCode == 46){
			//return delteCitation(editor);
			//return handleSpacebar(editor);
		}
	});
	
	editor.on('click', function(event) {
		$('.autoCiteSuggestion').remove();
		if ($('#content [data-cite-type]').length > 0){
			triggerReorder();
		}
	});
			
	editor.on('blur', function(e){
		if (($('#content [data-cite-type]').length > 0) && ($('.autoCiteSuggestion').length == 0)) {
			triggerReorder();
		}
	});
	
	editor.on('NodeChange', function(e){
		matches = false;
		//console.log(e.element);
		if (
			($(e.element).closest('[class*="Ref"]').length > 0) || 
			(($(e.element).find('[class*="Ref"]').length > 0) && ($(e.element).find('[class*="Ref"]').text() == $(e.element).text().replace(/^[\s\u00A0]|[\s\u00A0]$/, ''))) ||
			(($(e.element).find('[data-cite-type]').length > 0) && ($(e.element).find('[data-cite-type]').parent()[0] == e.element))
		){
		}else if ($(e.element).closest('.autoCiteSuggestion').length > 0){
		}else if ($(e.element).prev('[data-cite-type]').length > 0){
		}else if ((changedNode) && (changedNodeText != '')){
			var originalElement = changedNode;
            if (originalElement.attributes.class){
                matches = originalElement.attributes.class.textContent.match(/(Fig|Vid|Tab|ima|bib|sch|chart|box)Ref/gi);
			}
			if ((!matches) && ($(originalElement).find('[class*="Ref"]').length > 0) && (originalElement.children[0].attributes.class)){
				matches = originalElement.children[0].attributes.class.textContent.match(/(Fig|Vid|Tab|bib|ima|sch|chart|box)Ref/gi);
				originalElement = originalElement.children[0];
			}else if ((!matches) && (originalElement.parentElement) && (originalElement.parentElement.attributes) && (originalElement.parentElement.attributes.class)){
				matches = originalElement.parentElement.attributes.class.textContent.match(/(Fig|Vid|Tab|bib|ima|sch|chart|box)Ref/gi);
				originalElement = originalElement.parentElement;
			}
			if ((!matches) && ($('#content [data-cite-type]').length > 0) && ($('.autoCiteSuggestion').length == 0)) {
				originalElement = $('#content [data-cite-type]')[0];
			}
			var originalText = originalElement.textContent;
			if (matches){//if prev node 'text' and 'id' is changed then generate 'id' with the current text and replace it if any change
                //if(changedNodeText != originalText){
					var getRIDNode = $('<span class="'+$(originalElement).attr('class')+'">'+$(originalElement).html()+'</span>');
					if ($(originalElement).attr('class') == 'jrnlBibRef'){
						citeClass = [];
						citeClass[0] = true;
						citeClass[1] = 'jrnlBibRef';
					}else{
						var citeClass = commonjs.general.validateCitationData(getRIDNode);
					}
					if (citeClass[0]){//tag it as citation only response id true
						citeClass = citeClass[1];
						commonjs.general.updateCitationData(getRIDNode, false);
						if (((getRIDNode.attr('data-citation-string') != undefined) && ($(originalElement).attr('data-citation-string').replace(/^\s|\s$/g, '') != getRIDNode.attr('data-citation-string').replace(/^\s|\s$/g, ''))) || ($(originalElement).attr('data-cite-type') != undefined)){
							$(originalElement).attr('data-citation-string', getRIDNode.attr('data-citation-string'));
							$(originalElement).removeAttr('data-cite-type');
							$('.autoCiteSuggestion').remove();
							if (!(($(originalElement).attr('class') == 'jrnlBibRef') && (citeJS.settings.R.citationType == '1'))){
								$(originalElement).attr('data-cite-type', 'insert');
								triggerReorder();
							}
						}
					}else{
						commonjs.general.showNotice(true, 'Citations', 'Citation pattern mismatch','warning');
					}
                //}
            }else if (($(e.element).closest('sup').length > 0) && (/^[0-9]+$/.test($(e.element).text()))){
				if ((citeJS.settings.R.citationType == '0') && (citeJS.settings.R.formatStart == '<sup>')){
					rng = editor.selection.getRng(true).cloneRange();
					var getRIDNode = $('<span class="jrnlBibRef">' + editor.selection.getContent() + '</span>');
						commonjs.general.updateCitationData(getRIDNode, false);
						if (getRIDNode.attr('data-citation-string') != undefined){
							tinyMCE.activeEditor.selection.setContent("<span class='jrnlBibRef' data-citation-string=' "+ getRIDNode.attr('data-citation-string') +" ' data-cite-type='insert'>"+ editor.selection.getContent() + "</span>");
							triggerReorder();
						}
					//var sel = rangy.getSelection(); 
					//var range = sel.getRangeAt(0); 
					//getReferenceCitations(rng);
				}
			}
        }
		changedNode = e.element;//assigning the current node as changed node
		if ($(e.element).closest('[class*="Ref"]').length > 0){
			changedNode = e.element.parentNode;//assigning the current node as changed node
		}
		changedNodeText = $(changedNode).text();
    });
	
	function triggerReorder(){
		if ($(".se-pre-con:visible").length > 0){return false;}
		commonjs.general.updateCitationData($('#content [data-cite-type]'), false);
		var getRID = $('#content [data-cite-type]').attr('data-citation-string').replace(/^\s|\s$/g, '');
		var citeArray = getRID.split(' ');
		$('[data-pre-insert]').removeAttr('data-pre-insert');
		var insertNew = false;
		$(citeArray).each(function(i, id){
			if ($('#content #' + id).length == 0){
				insertNew = true;
			}
		});
		if (insertNew){
			$('#content [data-cite-type]').attr('data-pre-insert', 'true');
			$(".se-pre-con").fadeIn();
			object = 'Figure';
			if ($('#content [data-cite-type]').attr('class') == 'jrnlTblRef'){
				object = 'Table';
			}
			(new PNotify({title: 'Confirmation Needed',text: 'You have citeed a '+object+' which is not found in this article, Do you need to insert it as a new one?',icon: 'glyphicon glyphicon-question-sign',hide: false,confirm: {confirm: true},buttons: {closer: false,sticker: false},history: {history: false},
			stack: false,
				before_open: function(PNotify) {
					// Position this notice in the center of the screen.
					PNotify.get().css({
						"top": ($(window).height() / 2) - (PNotify.get().height() / 2),
						"left": ($(window).width() / 2) - (PNotify.get().width() / 2)
					});
				},
			})).get().on('pnotify.confirm', function() {
				if ($('#content [data-cite-type]').attr('class') == 'jrnlFigRef'){
					$('#addFigureDialog').modal();
				}
				if ($('#content [data-cite-type]').attr('class') == 'jrnlTblRef'){
					$('#addTableDialog').modal();
				}
				$(".se-pre-con").fadeOut();
				return false;
			}).on('pnotify.cancel', function() {
				$('[data-cite-type]').contents().unwrap();
				$(".se-pre-con").fadeOut();
				return false;
			});
		}else{
			citeJS.init();
			citeSeqObject = citeJS.floats.checkSequence();
			citeOBJ = (!(citeSeqObject.float && citeSeqObject.suppl));
			var confirmContent = '';
			citeType = 'floats';
			if (citeOBJ){
				citeType = 'citations';
				confirmContent = citeJS.floats.renumberCitationsConfirmation();
				if(confirmContent == '') {
					citeOBJ = false;
				}else{
					confirmContent = '<div style="max-height:300px;overflow:auto;">'+confirmContent+'</div>';
				}
			}
		}
		if (! insertNew){	
			if (!(($('#content [data-cite-type]').attr('class') == 'jrnlBibRef') && (citeJS.settings.R.citationType == '1'))){
				$(".se-pre-con").fadeIn();
				(new PNotify({title: 'Confirmation Needed',text: 'Reordering of ' + citeType + ' will happen as the order of ' + citeType + ' is changed!\n' + confirmContent,icon: 'glyphicon glyphicon-question-sign',hide: false,confirm: {confirm: true},buttons: {closer: false,sticker: false},history: {history: false},
				stack: false,
					before_open: function(PNotify) {
						// Position this notice in the center of the screen.
						PNotify.get().css({
							//"top": ($(window).height()) - (PNotify.get().height() / 2),
							"left": ($(window).width() / 2) - (PNotify.get().width() / 2),
							"max-height": ($(window).height()) + ($(window).height() / 3)
						});
					},
				})).get().on('pnotify.confirm', function() {
					if (citeOBJ){
						citeJS.floats.reorder();
					}else{
						citeJS.floats.reorderFloats();
						$('#contentClone [data-cite-type]').removeAttr('data-cite-type');
						$('#content').html($('#contentClone').html());
						$('#contentClone').remove();
					}	
					$('[data-cite-type]').removeAttr('data-cite-type');
					$(".se-pre-con").fadeOut();
				}).on('pnotify.cancel', function() {
					//$('[data-cite-type]').contents().unwrap();
					$(".se-pre-con").fadeOut();
					return false;
				});
			}
		}
	}
	
	function sortAlphaArray(alpha){
		//var alpha = ['A','B','C-F','E'];
		var retArray = [];
		for (var i = 0; i < alpha.length; i++){
		 var s = alpha[i];
			 if (/[-\u2013]/.test(s)){
					a = s.replace(/[-\u2013].*$/, '')
					b = s.replace(/^.*[-\u2013]/, '')
					var s= 'abcdefghijklmnopqrstuvwxyz';
					if(a=== a.toUpperCase()){
						b=b.toUpperCase();
						s= s.toUpperCase();
					}
					s= s.substring(s.indexOf(a), s.indexOf(b)+ 1);
					A= s.split(''); 
					for (var x = 0; x < A.length; x++){
						if(retArray.indexOf(A[x]) < 0){
							retArray.push(A[x]);
						}
					}
			 }else if (/,/.test(s)){
				A= s.split(','); 
				for (var x = 0; x < A.length; x++){
					if(retArray.indexOf(A[x]) < 0){
						retArray.push(A[x]);
					}
				}
			 }else{
				 if(retArray.indexOf(s) < 0){
					retArray.push(s);
				}
			 }
		}
		retArray = retArray.sort(retArray);
		return retArray;
	}
	
	function handleEclipse(editor) {
		parseCurrentLine(editor, -1, '(', true);
	}

	function handleSpacebar(editor, key) {
		parseCurrentLine(editor, 0, '', true, key);
	}

	function handleEnter(editor) {
		parseCurrentLine(editor, -1, '', false);
	}

	function test(editor, end_offset, delimiter){
		parseCurrentLine(editor, 0, '', true, true);
	}
	
	/***The generatesequence function used for converting array to sequence***/	
	function generatesequence(inputarray){
		var array = [],matchstring=false,numrng = [], nustart, nuend;
		/**Checking the array is numerical or alphabets**/
		inputarray	= inputarray.sort(inputarray);
		$.each(inputarray, function( index, value ) {
			if (value.match(/[a-zA-Z]$/i)) {
				matchstring = true;
				/*converting the alphabets to keycodes array*/
				array.push(value.charCodeAt());	
			}else{
				matchstring = false;
				array.push(value);
			}
			
		});
		/**Converting the array to sequence**/
		for (var i = 0; i < array.length; i++){
				nustart = array[i];
				nuend = nustart;
				while (array[i + 1] - array[i] == 1){
					nuend = array[i + 1]; 
					i++;
				}
				if(matchstring == false){
					numrng.push(nustart == nuend ? nustart+'' : nustart + '-' + nuend);	
				}else{
					nustart = String.fromCharCode(nustart);
					nuend 	= String.fromCharCode(nuend);
					numrng.push(nustart == nuend ? nustart+'' : nustart + '-' + nuend);		
				}
				
			}
			/**Returning the result of sequence**/		
				numrng 	= numrng.toString();
				spval 	= numrng.split('-');
				if ((spval[1] - spval[0]) == 1){
					return spval[0] + "," + spval[1];
				}else{
					return numrng;
				}	
	}	

	function getReferenceCitations(rng, text, prevMatches){
		rngheight = rng.getBoundingClientRect().height;
		rngtop = rng.getBoundingClientRect().bottom;
		rngleft = rng.getBoundingClientRect().left;
		/*****Build the suggetions for citation*****/
		newList = $("<div class='autoCiteSuggestion' style='background: white none repeat scroll 0 0;max-height: 250px;width: 200px;padding: 3px 5px;list-style-type: none;border: 1px solid #ddd;position: absolute; z-index: 99999;overflow-y:auto;top:"+rngtop+"px;left:"+rngleft+"px';/>");
		var blockFloat;
		$("#content .jrnlRefText").each( function(){
			if ((citeJS.settings.R.citationType == '0') && (/^[\[\(]?[0-9]+[0-9\,\;\s\-\u2013]*[\]\)]?$/.test(text))){
				labelText = $(this).attr('id').replace('R', '');
				if ($(this).find('.RefSlNo').length > 0){
					labelText = $(this).find('.RefSlNo').text().replace(/\./g, '');
				}
				$(newList).append("<div id='"+$(this).attr('id')+"' style='padding:3px; cursor:pointer;text-align:left;' data-text-val='"+val+"' class='jrnlBibRef'><p class='jrnlBibRef suggestions'>" + labelText + "</p></div>");
			}else{
				/*****Remove the Space from text ****/
				var val = $(this).find('.RefSurName').first().text().replace(/\u00A0/gi, ' ');
				val = val.replace(/^[\u00A0\s]+|[\u00A0\s\.\:]+$/g, '');
				val = val.replace(/[\u2013\u2014]/g, '-');
				var checkText = text.replace(/[\u2013\u2014]/g, '-');
				var regex = new RegExp('^' + checkText , 'gi');
				/***Checking for regexp match***/
				var citedArray = [];
				if ((regex.test(val)) || (prevMatches)) {
					if ($(this).find('.RefAuthor').length == 1){
						labelText = $(this).find('.RefSurName').text() + ', ' + $(this).find('.RefYear').text();
					}
					else if ($(this).find('.RefAuthor').length == 2){
						labelText = $(this).find('.RefSurName').first().text() + ' and ' + $(this).find('.RefSurName').last().text() + ', ' + $(this).find('.RefYear').text();
					}else{
						labelText = $(this).find('.RefSurName').first().text() + ' et al., ' + $(this).find('.RefYear').text();
					}
					$(newList).append("<div id='"+$(this).attr('id')+"' style='padding:3px; cursor:pointer;text-align:left;' data-text-val='"+val+"' class='jrnlBibRef'><p class='jrnlBibRef suggestions'>" + labelText + "</p></div>");
				}
				$('.jrnlBibRef[data-cite-type]').removeAttr('data-cite-type');
			}
		});
		/***show the suggesion in closest the cursor point***/
		if ($(newList).find('div').length > 0){
			$('body').append($(newList));	
			$(newList).attr('data-text-rng', rng.toString());
		}
		$('.autoCiteSuggestion li').off('click');
		$('.autoCiteSuggestion .suggestions').on('click', function(e){
			e.preventDefault();
			e.stopPropagation();
			editor.selection.setRng(rng);
			var citeClass = 'jrnlBibRef';
			$(this).toggleClass('selected');
			if ($(this).hasClass('plablels') && $(this).hasClass('selected') && ($(this).closest('div').find('p.selected').length == 0)){
				$(this).closest('div').find('p.suggestions').addClass('selected');
			}
			if ((!$(this).hasClass('plablels')) && (!$(this).hasClass('selected'))){
				$(this).closest('div').find('.selected').removeClass('selected');
			}
			var labelText = '', dataCiteString = ' ';
			$('.autoCiteSuggestion .selected').each(function(){
					labelText += ',' + $(this).html();
				dataCiteString += $(this).parent().attr('id') + ' ';
			})
			labelText = labelText.replace(/^,/gi, '');
		if (($(tinyMCE.activeEditor.selection.getNode()).closest('[class*="Ref"]').length > 0) || ($('[class*="Ref"][data-cite-type]').length >0)){
			var getprenode = $(tinyMCE.activeEditor.selection.getNode());
			if ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0){
				getprenode = $(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]')[0];
			}
			if ($('[class*="Ref"][data-cite-type]').length >0){
				getprenode = $('[class*="Ref"][data-cite-type]')[0];
			}
			if (labelText == ''){
				$(getprenode).remove();
				tinyMCE.activeEditor.selection.setContent($('.autoCiteSuggestion').attr('data-text-rng'));
			}else{
				$(getprenode).attr('data-citation-string', dataCiteString).html(labelText);
			}
		}else{
			editor.selection.setRng(rng);
			if (labelText == ''){
				tinyMCE.activeEditor.selection.setContent($('.autoCiteSuggestion').attr('data-text-rng'));
			}else{
				tinyMCE.activeEditor.selection.setContent(citeJS.settings.R.formatStart + "<span class='"+citeClass+"' data-citation-string=' "+ dataCiteString +" ' data-cite-type='insert'>"+ labelText + "</span>" + citeJS.settings.R.formatEnd);
				var getprenode = tinyMCE.activeEditor.selection.getNode();
				if ($(getprenode).closest('sup').length > 0 && $(getprenode).find('sup').length > 0){
					$(getprenode).find('sup').contents().unwrap();
				}
				if ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0){
					getprenode = $(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]')[0];
				}
			}
		}
		if (citeJS.settings.R.citationType == '1'){
			var currNode = tinyMCE.activeEditor.selection.getNode();
			if (($(currNode).attr('data-citation-string') != dataCiteString) && ($(currNode).find('[data-citation-string]').length != 1)){
				currNode = $(currNode).find('[data-citation-string=" '+dataCiteString+' "]')[0];
			}
			var prevNode = currNode.previousSibling;
			if (prevNode && (prevNode.nodeName == '#text') && (/^[\s\.\;\[\]\(\)\u00A0]+$|^$/i.test(prevNode.nodeValue))) {
				prevTextNode = prevNode;
				prevNode = prevNode.previousSibling;
				if (prevNode && ((prevNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(prevNode.getAttribute('class')))){
					prevTextNode.nodeValue = '; ';
				}
			}else if (prevNode && ((prevNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(prevNode.getAttribute('class')))){
					$(currNode).before('; ');
			}// end of if prevNode

			var nextNode = currNode.nextSibling;
			if ((nextNode.nodeName == '#text') && (/^[\s\.\;\[\]\(\)\u00A0]+$|^$/.test(nextNode.nodeValue))) {
				nextTextNode = nextNode;
				nextNode = nextNode.nextSibling;
				if (nextNode && ((nextNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(nextNode.getAttribute('class')))){
					nextTextNode.nodeValue = '; ';
				}
			}else if (nextNode && ((nextNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(nextNode.getAttribute('class')))){
				$(currNode).after('; ');
			}
		}
			editor.selection.collapse();
			if (citeJS.settings.R.citationType == '1'){
				$('.autoCiteSuggestion').remove(); 
			}
		});

	}

	function parseCurrentLine(editor, end_offset, delimiter, enter, key) {
		var rng, end, start, endContainer, bookmark, text, matches, prev, next, len, rngText, prevText = '';
		autoCiteKeyPressed = false;
		function scopeIndex(container, index) {
			if (index < 0) {
				index = 0;
			}

			if (container.nodeType == 3) {
				var len = container.data.length;

				if (index > len) {
					index = len;
				}
			}

			return index;
		}

		function setStart(container, offset) {
			if (container.nodeType != 1 || container.hasChildNodes()) {
				rng.setStart(container, scopeIndex(container, offset));
			} else {
				rng.setStartBefore(container);
			}
		}

		function setEnd(container, offset) {
			if (container.nodeType != 1 || container.hasChildNodes()) {
				rng.setEnd(container, scopeIndex(container, offset));
			} else {
				rng.setEndAfter(container);
			}
		}

		// Never create a link when we are inside a link
		if (editor.selection.getNode().tagName == 'A') {
			return;
		}

		// We need at least five characters to form a URL,
		// hence, at minimum, five characters from the beginning of the line.
		var prevMatches = false;
		var prevEndContainer = false;
		//added by JAI - 12-01-2016 for normalizing all text nodes as one inside inserted node to get the actual range
		editor.selection.getStart().normalize();
		rng = editor.selection.getRng(true).cloneRange();
		/***test to get the actual rng string***/
		endContainer = rng.endContainer;
		// Get a text node
		if (endContainer.nodeType != 3 && endContainer.firstChild) {
			while (endContainer.nodeType != 3 && endContainer.firstChild) {
				endContainer = endContainer.firstChild;
			}
			// Move range to text node
			if (endContainer.nodeType == 3) {
				setStart(endContainer, 0);
				setEnd(endContainer, endContainer.nodeValue.length);
			}
		}
		prev = rng.endContainer.previousSibling;//get previous sibling of the current range in order to check the range falls behind any citations
		if (!prev) {
			prev = rng.endContainer.parentElement.previousSibling;
		}
		if (!prev) {
			if (!rng.endContainer.firstChild || !rng.endContainer.firstChild.nextSibling) {
				//return;
			}else{
				prev = rng.endContainer.firstChild.nextSibling;
			}
		}
		var prevTextContent = rng.startContainer.textContent;
		var patternMatched = true;
		//check the current range text matches the pattern for citation 
		if (prevTextContent != ''){
			if (!(
				(/^[\,\;\s0-9\u00A0\-\u2013\u2014]+$|^[\,\;\sa-z\u00A0\-\u2013\u2014]+$|^[\,\;\s\u00A0]*and[\,\;\s0-9\u00A0]+$/gi.test(prevTextContent)) || 
				((/(figure|supplement|source|data|code)/i.test(prevTextContent)) && (! /[\s\u00A0](figure|table)/i.test(prevTextContent)))
				)){
				patternMatched = false;
			}
		}
		if ((prev) && (prev.nodeType == 1) && (prev.attributes.class) && (patternMatched)){
			prevMatches = prev.attributes.class.textContent.match(/(Fig|Bib|Vid|Tab|ima|sch|chart|box|suppl|Eq)Ref/gi);
		}
		
		if ((prev) && (!prevMatches) && (prev.previousSibling) && (prev.previousSibling.nodeType == 1) && (prev.previousSibling.attributes.class)){
			searchSatisfied = true;
			//keep checking previous sibling text untill our pattern matches
			while ((searchSatisfied) && (patternMatched)){
				prevPrevNode = prev.previousSibling;
				if (!( (prevPrevNode) && (prevPrevNode.nodeType == 1) && (prevPrevNode.attributes.class) && (prevPrevNode.attributes.class.textContent.match(/^del/gi)))){
					prevTextContent = prev.textContent + prevTextContent;//considering the text which are not deleted
				}
				if ((prevTextContent != '') && (!((/^[\,\;\s0-9\u00A0\-\u2013\u2014]+$|^[\,\;\sa-z\u00A0\-\u2013\u2014]+$|^[\,\;\s\u00A0]*and[\,\;\s0-9\u00A0]+$/i.test(prevTextContent)) || (/figure|supplement|source|data|code/.test(prevTextContent))))){
					patternMatched = false;//checking if the text so far set as range matches our pattern
				}
				if ((prevPrevNode) && (prevPrevNode.nodeType == 1) && (prevPrevNode.attributes.class) && (prevPrevNode.attributes.class.textContent.match(/^del/gi))){
					prev = prevPrevNode;
				}else if ((! /\)/.test(prevTextContent)) && (prevTextContent.split(/[\s\u00A0]/g).length < 4) && (patternMatched)){
					if ((prevPrevNode) && (prevPrevNode.nodeType == 1) && (prevPrevNode.attributes.class)){
						prevMatches = prevPrevNode.attributes.class.textContent.match(/(Fig|Bib|Vid|Tab|ima|sch|chart|box|eq|suppl)Ref/gi);
						if (prevMatches){//breaking the check once any citation is found
							setStart(prev, 0);//setting up the start for range --- from start index (0) of the last iterated previous sibling
							prevEndContainer = prev;
							searchSatisfied = false;
						}else{
						}
					}
					prev = prevPrevNode;
				}else{
					searchSatisfied = false;
				}
			}
		}
		$('[data-auto-cite]').removeAttr('data-auto-cite');
		if (prevMatches){//get the content of the citation found
			if (!((prev.attributes.class.textContent == 'jrnlBibRef') && (citeJS.settings.R.citationType == '1'))){
				prevText = prev.textContent + prevText;
				$(prev).attr('data-auto-cite', 'true');
				autoCiteTriggered = false;
			}else{
				prevMatches = false;
			}
		}
		if ((rng.endContainer.parentNode) && (rng.endContainer.parentNode.nodeType == 1) && (rng.endContainer.parentNode.attributes.class) && (patternMatched)){
			if(rng.endContainer.parentNode.attributes.class.textContent.match(/(Fig|Bib|Vid|Tab|ima|sch|chart|box|suppl|Eq)Ref/gi)){
				prevMatches = true;
				prev = rng.endContainer.parentNode;
				//prevText = prev.textContent;
				$(prev).attr('data-auto-cite', 'true');
				autoCiteTriggered = false;
			}
		}
		if (rng.endOffset == 1) {
			end = 2;
		} else {
			if (rng.endOffset < rng.endContainer.length){
				end = rng.endContainer.length - end_offset;
			}else{	
				end = rng.endOffset - end_offset;
			}
		}
		start = end;
		if (prevMatches){
			end = 0;
		}
		//if check is made for the first time, get the range till it matche a space
		if ((! autoCiteTriggered) && (!prevMatches)){
			do {
				rng.setStart(endContainer, end >= 2 ? end - 2 : 0);// Move the selection one character backwards.
				rng.setEnd(endContainer, end >= 1 ? end - 1 : 0);
				end -= 1;
				// Loop until one of the following is found: a blank space, &nbsp;, delimiter, (end-2) >= 0
			} while (rng.toString() != ' ' && rng.toString() !== '' &&
				rng.toString().charCodeAt(0) != 160 && (end -2) >= 0 && rng.toString() != delimiter);
		}
		//if the previously entered character matches patter, the current range is set till the previously set range
		//say first time 'Figure' is typed and next '1' is typed, so the range will be set as 'Figure 1'
		if (autoCiteTriggered){
			while ((! /[\s\u00A0\(\[](Appendix|Fig|Vid|Tab|ima|sch|chart|box|Supplement|Equation)/gi.test(rng.toString())) && (end - 1) >= 0) {
				// Move the selection one character backwards.
				setStart(endContainer, end >= 2 ? end - 1 : 0);
				end -= 1;
			}// Loop until one of the following is found: a blank space, &nbsp;, delimiter, (end-2) >= 0
			if (/^[\s\u00A0\(\[]/.test(rng.toString())){
				setStart(endContainer, end >= 1 ? end + 1 : 1);
				end += 1;
			}
			if (! /[\s\u00A0]$/.test(rng.toString())){
				//start += 1;
			}
		}
		/*if (next){
			setStart(endContainer, 0);
			setEnd(endContainer, start);
			if ((! /[\s\,\;\-\u2013\u2014]$/.test(rng.toString())) && (! /^[\s\,\;\-\u2013\u2014]/.test(next.textContent))){
				return;
			}
		}
		if (/[\s\u00A0]$/.test(rng.toString())){
			start -= 1;
		}*/
			if ((! prevMatches) && (/^[\s\u00A0]/.test(rng.toString()))){//if the range start with punctuation, its trimmed
				setStart(endContainer, end >= 1 ? end + 1 : 1);
				//end += 1;
			}
			if (/^[\s\u00A0]$/.test(rng.toString())){//if the range start with punctuation, its trimmed
				setStart(endContainer, end >= 1 ? end + 1 : 1);
				//end += 1;
			}

		if (rng.toString().charCodeAt(0) == 160) {
			setStart(endContainer, end);
			setEnd(endContainer, start);
			end += 1;
		} else if (prevEndContainer){//if prev has a citation in it, to set range from its end
			setStart(prevEndContainer, end);
			setEnd(endContainer, start);
		} else if ((rng.startOffset === 0) || (prevMatches)) {
			setStart(endContainer, 0);
			setEnd(endContainer, start);
		} else {
			setStart(endContainer, end);
			setEnd(endContainer, start);
		}
		
		text = rng.toString().replace(/\u00A0/gi, ' ');
		if (prevMatches){//get text from prev. citations
			text = prevText + text;
		}
		
		text = text.replace(/^[\u00A0\s]+|[\u00A0\s]+$/g, '');
		text = text.replace(/([/\(\[])/g, '\\$1');
		//setEnd(endContainer, start + 1);
		
		matches = text.match(/^(Fig|Vid|Tab|ima|sch|chart|box|Supplement|Appendix|Equation)/gi);
		jQuery.expr[":"].containsIgnoreCase = jQuery.expr.createPseudo(function(arg) {
				return function( elem ) {
				return jQuery(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0;
				};
			});
			
		citeEndOffset = true;
		
		if ((!matches) && (/[0-9]{41}/.test(text))){//when 4 digit numbers is typed, considering it may be an author year
			var regex = new RegExp(text , 'gi');
			var matchRefText = $(".jrnlRefText .RefYear").filter(function () {
				return regex.test($(this).text()); 
			});
			var authorString = '';
			var firstAuthorString = '';
			$(matchRefText).parent().each(function(){
				firstAuthorString +=  '^' + $(this).find('.RefSurName:first').text() + '|';
				$(this).find('.RefSurName').each(function(){//:not(":first")
					var sn = $(this).text().split(' ');
					sn = sn.join('|');
					authorString += sn + '|';
				})
			})
			firstAuthorString = '(' + firstAuthorString.replace(/\|$/, '') + ')';
			authorString = '(' + authorString.replace(/\|$/, '') + ')';
			
			if (matchRefText.length > 0){
				var stringMatch = true;
				while (stringMatch){
					do {
						rng.setStart(endContainer, end >= 2 ? end - 2 : 0);// Move the selection one character backwards.
						rng.setEnd(endContainer, end >= 1 ? end - 1 : 0);
						end -= 1;
						// Loop until one of the following is found: a blank space, &nbsp;, delimiter, (end-2) >= 0
					} while (rng.toString() != ' ' && rng.toString() !== '' &&
						rng.toString().charCodeAt(0) != 160 && (end -2) >= 0 && rng.toString() != delimiter);
					if (end == 1){
						end -= 1;
					}
					if (/^[\s\u00A0\(\[]/.test(rng.toString())){//if the range start with punctuation, its trimmed
						setStart(endContainer, end + 1);
					}
					setStart(endContainer, end);
					setEnd(endContainer, start);
					if (/^[\s\u00A0\(\[]/.test(rng.toString())){//if the range start with punctuation, its trimmed
						setStart(endContainer, end + 1);
					}
					text = rng.toString().replace(/\u00A0/gi, ' ');
					if (end == 0){
						stringMatch = false;
					}
					else {
						var roa = new RegExp(authorString , 'gi');
						var fa = new RegExp(firstAuthorString , 'gi');
						if (/^(et al|and |al[\.\,\s]+[0-9])/.test(text)){
						}
						else if (fa.test(text)){
							stringMatch = false;
						}
						else if (! roa.test(text)){
							stringMatch = false;
						}
					}
				}
				var getRIDNode = $('<span class="jrnlBibRef">' + rng.toString() + '</span>');
				editor.selection.setRng(rng);
				commonjs.general.updateCitationData(getRIDNode);
					var labelText = tinyMCE.activeEditor.selection.getContent().replace(/ $/, '');
				if (getRIDNode.attr('data-citation-string') != undefined){
					var ref = $('#content #' + getRIDNode.attr('data-citation-string').replace(/^ | $/g, ''));
					if ($(ref).find('.RefAuthor').length == 1){
						labelText = $(ref).find('.RefSurName').text() + ', ' + $(ref).find('.RefYear').text();
					}
					else if ($(ref).find('.RefAuthor').length == 2){
						labelText = $(ref).find('.RefSurName').first().text() + ' and ' + $(ref).find('.RefSurName').last().text() + ', ' + $(ref).find('.RefYear').text();
					}else{
						labelText = $(ref).find('.RefSurName').first().text() + ' et al., ' + $(ref).find('.RefYear').text();
					}
					tinyMCE.activeEditor.selection.setContent("<span class='jrnlBibRef' data-citation-string=' "+ getRIDNode.attr('data-citation-string')+" '>" + labelText + "</span>");
					var currNode = tinyMCE.activeEditor.selection.getNode();
					var prevNode = currNode.previousSibling;
					if (prevNode && (prevNode.nodeName == '#text') && (/^[\s\.\;\[\]\(\)\u00A0]+$/i.test(prevNode.nodeValue))) {
						prevTextNode = prevNode;
						prevNode = prevNode.previousSibling;
						if (prevNode && ((prevNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(prevNode.getAttribute('class')))){
							prevTextNode.nodeValue = '; ';
						}
					}else if (prevNode && ((prevNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(prevNode.getAttribute('class')))){
							$(currNode).before('; ');
					}// end of if prevNode

					var nextNode = currNode.nextSibling;
					if ((nextNode.nodeName == '#text') && (/^[\s\.\;\[\]\(\)\u00A0]+$/.test(nextNode.nodeValue))) {
						nextTextNode = nextNode;
						nextNode = nextNode.nextSibling;
						if (nextNode && ((nextNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(nextNode.getAttribute('class')))){
							nextTextNode.nodeValue = '; ';
						}
					}else if (nextNode && ((nextNode.nodeName).toLocaleLowerCase() == 'span') && (/jrnlBibRef/.test(nextNode.getAttribute('class')))){
						$(currNode).after('; ');
					}
				}
				editor.selection.collapse(false);
			}
		}
		
		/***Remove the Suggestion***/
		if (matches){
			$('.autoCiteSuggestion').remove(); 
            var ltext = '',newList ='',rngheight,rngtop,rngleft,id,pclass,test,$pList = '';

            rngheight = rng.getBoundingClientRect().height;
            rngtop = rng.getBoundingClientRect().bottom;
            rngleft = rng.getBoundingClientRect().left;

            /*****Build the suggetions for citation*****/
			newList 		= $("<div class='autoCiteSuggestion' style='background: white none repeat scroll 0 0;max-height: 250px;width: 200px;padding: 3px 5px;list-style-type: none;border: 1px solid #ddd;position: absolute; z-index: 99999;overflow-y:auto;top:"+rngtop+"px;left:"+rngleft+"px';/>");
   			var blockFloat;
			$("#content .label").each( function(){ 
   				/*****Remove the Space from text ****/
   				var val = $(this).text().replace(/\u00A0/gi, ' ');
   				val = val.replace(/^[\u00A0\s]+|[\u00A0\s\.\:]+$/g, '');
   				val = val.replace(/[\u2013\u2014]/g, '-');
				var checkText = text.replace(/[\u2013\u2014]/g, '-');
				checkText = checkText.replace(/[\,\ ]$/g, '');
				var regex = new RegExp('^' + checkText , 'gi');
   				/***Checking for regexp match***/
   				var citedArray = [];
				if ((regex.test(val)) || (prevMatches)) {
					if (($(tinyMCE.activeEditor.selection.getNode()).closest('[class*="Ref"]').length > 0) || ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0) || ($('[class*="Ref"][data-cite-type]').length >0)){
						var getprenode = $(tinyMCE.activeEditor.selection.getNode());
						if ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0){
							getprenode = $(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]')[0];
						}
						else if ($('[class*="Ref"][data-cite-type]').length >0){
							getprenode = $('[class*="Ref"][data-cite-type]')[0];
						}
						if ($(getprenode).attr('data-citation-string') != undefined){
							citedArray = $(getprenode).attr('data-citation-string').replace(/^ | $/, '').split(' ');
						}
					}
					if (prevMatches){
						citedArray = $(prev).attr('data-citation-string').replace(/^ | $/, '').split(' ');
						blockFloat 	= $('#'+ citedArray[0]).closest('*[class*="Block"]').attr('class');;
					}
					if (! prevMatches){
						blockFloat 	= $(this).closest('*[class*="Block"]').attr('class');
					}
					$('#content .' + blockFloat).find(".label").each( function(){ 
						/*****Remove the Space from text ****/
						var val = $(this).text().replace(/\u00A0/gi, ' ');
						val = val.replace(/^[\u00A0\s]+|[\u00A0\s\.\:]+$/g, '');
						val = val.replace(/[\u2013\u2014]/g, '-');
						var checkText = text.replace(/[\u2013\u2014]/g, '-');
						var regex = new RegExp('^' + checkText , 'gi');
						id = $(this).closest('[id]').attr('id');
						pclass = $(this).closest('[id]').attr('class');
						pchildren = $(this).closest('*[class*="Block"]').find('.partLabel');
						var labelNode = $(this).clone();
						$(labelNode).find('.del').remove();
						$(labelNode).find('.ins').contents().wrap();
						var labelText = $(labelNode).text().replace(/[\. ,:-]+$/gi, '')
						/***Checking for regexp match***/
						if ((citedArray.length > 0) && (citedArray.indexOf(id) != -1)){
							$(newList).append("<div id='"+id+"' style='padding:3px; cursor:pointer;text-align:left;' data-text-val='"+val+"' class='"+pclass+"'><p class='"+pclass+" selected suggestions'>" + labelText + "</p></div>");
						}else{
							$(newList).append("<div id='"+id+"' style='padding:3px; cursor:pointer;text-align:left;' data-text-val='"+val+"' class='"+pclass+"'><p class='"+pclass+" suggestions'>" + labelText + "</p></div>");
						}
						/*if($(pchildren).length > 0){
							var pList = "<p>";//"<span id='"+$(this).text().replace(/[\. ,:-]+$/gi, '')+"' class='gplables'>";
							var partArray = [];
							for (var i = 0; i < $(pchildren).length; i++) {
								child = $(pchildren)[i];
								if (/^[A-Z][\-\u2013\,\s]?[A-Z\u2013\-\,\s]*$/gi.test($(child).text())){
									partArray.push($(child).text());
								}
							}
							partArray = sortAlphaArray(partArray);
							for (var i = 0; i < partArray.length; i++) {
								pList += "<span id='" + id + "' style='margin: 0px 2px;padding: 0px 2px;border: 1px solid #AAA;width: 13px;' class='plablels suggestions'>" + partArray[i] + "</span>";
							}
							pList += "</p>";
							$(newList).find('div:last').append(pList);
						}*/
					});
					return false;
   				}
   			});
   			/***show the suggesion in closest the cursor point***/
			if ($(newList).find('div').length > 0){
				$('body').append($(newList));
				$(newList).attr('data-text-rng', rng.toString());
			}
			autoCiteTriggered = true;
			if ((autoCiteTriggered) && (/[0-9][a-z]{0,1}([,\-\u2013\u2014][\s\u00A0]*[a-z])*([,\-\u2013\u2014][\s\u00A0]*[0-9]+[a-z]{0,1})*$/gi.test(text)) && (! /([0-9][a-z][\s\u00A0]*[0-9])|([0-9],[\s\u0A00][a-z]$)/gi.test(text)) && (! /^[\,\s\u00A0]+$/gi.test(rng.toString()))){//((! /[\,\s\u00A0]$/gi.test(rng.toString())) && (!prevMatches))
				$node = editor.selection.getNode();
				if($node.hasAttribute('data-citation-string')){
					//editor.selection.setRng(rng);
					//$('.autoCiteSuggestion').remove();
					//$('body').append($(newList));		
				}else if (citeEndOffset){
					
					var citeClass ='',selnode,selnodeattr;
					$this = $(".autoCiteSuggestion [data-text-val='" + text + "']");
					
					if (prevMatches){
						//setStart(endContainer, 0);
						if (/[\s\u00A0]$/.test(rng.toString())){
							start -= 1;
							setEnd(endContainer, start);
						}
						editor.selection.setRng(rng);
						if ($(tinyMCE.activeEditor.selection.getNode()).hasClass('ins')){
							if (tinyMCE.activeEditor.selection.getNode().textContent == rng.toString()){
								var node = tinyMCE.activeEditor.selection.getNode();
								setStart(node, 0);
								editor.selection.setRng(rng);
							}
						}
						var getRIDNode = $('<span class="'+$(prev).attr('class')+'">' + prev.textContent + rng.toString() + '</span>');
						var citeClass = commonjs.general.validateCitationData(getRIDNode);
						if (citeClass[0]){
							commonjs.general.updateCitationData(getRIDNode, false);
							if (getRIDNode.attr('data-citation-string') != undefined){
								$(prev).attr('data-citation-string', getRIDNode.attr('data-citation-string'));
								$(prev).attr('data-cite-type', 'insert');
								if ($(tinyMCE.activeEditor.selection.getNode()).find(prev).length > 0){
									var rngContents = rng.extractContents();
									var ecl = rngContents.childNodes.length;
									for (var ec = 0; ec < ecl; ec++){
										$(prev).append($(rngContents.childNodes[0]))
									}
								}else if (rng.commonAncestorContainer.textContent == rng.toString()){
									$(prev).append($(tinyMCE.activeEditor.selection.getNode()))
								}else{
									//tinyMCE.activeEditor.selection.setContent("<span class='jrnlFigRef' data-citation-string=' "+ getRIDNode.attr('data-citation-string')+" '>" + $(prev).html() + tinyMCE.activeEditor.selection.getContent({format : 'html'}) + "</span>");
									var rngContents = rng.extractContents();
									var ecl = rngContents.childNodes.length;
									for (var ec = 0; ec < ecl; ec++){
										$(prev).append($(rngContents.childNodes[0]))
									}
								}
								tinyMCE.activeEditor.selection.setCursorLocation(prev, prev.childNodes.length)
								editor.selection.collapse(false);
								//triggerReorder();
							}
						}
							editor.selection.collapse(false);
					}/*else if($this.length > 0){
						editor.selection.setRng(rng);
						labelText = text;
						var citeClass = exetercs.settings.citationClass[$this.attr('class').split(' ')[0]];
						tinyMCE.activeEditor.selection.setContent("<span class='"+citeClass+"' data-cite-type='insert' data-citation-string=' "+$this.attr('id')+" '>" + $this.find('p.suggestions').text() + "</span>");
						$this.find('p.suggestions').addClass('selected');
						editor.selection.collapse(false);
					}else{
						editor.selection.setRng(rng);
						//check if the selected text matches the citation pattern
						var citeClass = commonjs.general.validateCitationData($('<span>' + tinyMCE.activeEditor.selection.getContent().replace(/ $/, '') + '</span>'));
						if (citeClass[0]){//tag it as citation only response id true
							citeClass = citeClass[1];
							var getRIDNode = $('<span class="'+ citeClass +'">'+tinyMCE.activeEditor.selection.getContent().replace(/ $/, '')+'</span>');
							commonjs.general.updateCitationData(getRIDNode, false);
							if (getRIDNode.attr('data-citation-string') != undefined){
								tinyMCE.activeEditor.selection.setContent("<span class='"+ citeClass +"' data-cite-type='insert' data-citation-string=' "+ getRIDNode.attr('data-citation-string')+" '>" + tinyMCE.activeEditor.selection.getContent().replace(/ $/, '') + "</span>");
							}
						}
						editor.selection.collapse(false);
					}*/
				}
			 	getprenode 	= $(tinyMCE.activeEditor.selection.getNode()).clone();
				//prenodecloned 	= getprenode.clone();		
			}//enD Of autoCiteTriggered check
			else{
				if (! ((prevMatches) && (/^[\s\,\;]+[a-z]*[\s,\,\;]*$/.test(rng.toString())) || (/Fig|Tab|Vid|Suppl/i.test(rng.toString())) ) ){
					$('.autoCiteSuggestion').remove(); 
				}
			}
			
			$('.autoCiteSuggestion li').off('click');
			$('.autoCiteSuggestion .suggestions').on('click', function(e){
				e.preventDefault();
				e.stopPropagation();
				editor.selection.setRng(rng);
				var citeClass = 'jrnlFigRef';
				if (($(tinyMCE.activeEditor.selection.getNode()).closest('[class*="Ref"]').length > 0) || ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0) || ($('[class*="Ref"][data-cite-type]').length >0) || ($('[class*="Ref"][data-auto-cite]').length >0)){
					var getprenode = $(tinyMCE.activeEditor.selection.getNode());
					if ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0){
						getprenode = $(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]')[0];
					}
					if ($('[class*="Ref"][data-cite-type]').length >0){
						getprenode = $('[class*="Ref"][data-cite-type]')[0];
					}
					if ($('[class*="Ref"][data-auto-cite]').length >0){
						getprenode = $('[class*="Ref"][data-auto-cite]')[0];
					}
					var citeID = $(getprenode).attr('data-citation-string').replace(/^\s+|\s+$/g, '').split(/\s+/);
					var citeString = $(getprenode).text();
					var citeArray = citeString.split(',');
					var cl =citeArray.length;
					var currIndex = citeID[0];
					var ci = 0;
					selectedFigArr = {};
					for (var i=0; i<cl; i++){
						var citationString = citeArray[i];
						 citationString =  citationString.replace(/^.*?([0-9A-Z]+)$/i, '$1');
						 if (/^[0-9]+[A-Z]*$/i.test(citationString)){
							 currIndex = citeID[ci++];
							 selectedFigArr[currIndex] = '';
						 }
						 if (/[A-Z]+$/i.test(citationString)){
							citationString =  citationString.replace(/[0-9]+/, '');
							citationString = selectedFigArr[currIndex] + ',' + citationString;
							citationString = citationString.replace(/^,/, '');
							selectedFigArr[currIndex] = citationString;
						 }
					}
					//selectedFigArr = partsArray;
				}
				
				$(this).toggleClass('selected');
				if ($(this).hasClass('plablels') && $(this).hasClass('selected') && ($(this).closest('div').find('p.selected').length == 0)){
					$(this).closest('div').find('p.suggestions').addClass('selected');
				}
				if ((!$(this).hasClass('plablels')) && (!$(this).hasClass('selected'))){
					$(this).closest('div').find('.selected').removeClass('selected');
				}
				var labelText = '', dataCiteString = ' ';
				$('.autoCiteSuggestion .selected').each(function(){
					if ($(this).hasClass('plablels')){
						if (/[0-9]$/.test(labelText)){
							labelText += $(this).html();
						}else if (/[A-Z]$/i.test(labelText)){
							labelText += ',' + $(this).html();
						}
					}else if ((labelText != '') && (/(Figure|Table|Video)\s([0-9\,\s]+)$/.test(labelText))){
						labelText += ',' + $(this).html().replace(/^(Figure|Table|Video)\s([0-9]+)$/gi, '$2');
					}else{
						labelText += ', ' + $(this).html();
					}
					if (typeof(selectedFigArr[$(this).parent().attr('id')]) != 'undefined'){
						labelText += selectedFigArr[$(this).parent().attr('id')];
					}
					dataCiteString += $(this).parent().attr('id') + ' ';
				})
				labelText = labelText.replace(/^, /gi, '');
				var citeClass = commonjs.general.validateCitationData($('<span>' + labelText + '</span>'));
				if (citeClass[0]){//tag it as citation only response id true
					citeClass = citeClass[1];
				}
				if (($(tinyMCE.activeEditor.selection.getNode()).closest('[class*="Ref"]').length > 0) || ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0) || ($('[class*="Ref"][data-cite-type]').length >0) || ($('[class*="Ref"][data-auto-cite]').length >0)){
					var getprenode = $(tinyMCE.activeEditor.selection.getNode());
					if ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0){
						getprenode = $(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]')[0];
					}
					if ($('[class*="Ref"][data-cite-type]').length >0){
						getprenode = $('[class*="Ref"][data-cite-type]')[0];
					}
					if ($('[class*="Ref"][data-auto-cite]').length >0){
						getprenode = $('[class*="Ref"][data-auto-cite]')[0];
						editor.selection.setRng(rng);
						if ($(tinyMCE.activeEditor.selection.getNode()).find(prev).length > 0){
							var rngContents = rng.extractContents();
							var ecl = rngContents.childNodes.length;
							for (var ec = 0; ec < ecl; ec++){
								$(prev).append($(rngContents.childNodes[0]))
							}
						}else if (rng.commonAncestorContainer.textContent == rng.toString()){
							$(prev).append($(tinyMCE.activeEditor.selection.getNode()))
						}else{
							//tinyMCE.activeEditor.selection.setContent("<span class='jrnlFigRef' data-citation-string=' "+ getRIDNode.attr('data-citation-string')+" '>" + $(prev).html() + tinyMCE.activeEditor.selection.getContent({format : 'html'}) + "</span>");
							var rngContents = rng.extractContents();
							var ecl = rngContents.childNodes.length;
							for (var ec = 0; ec < ecl; ec++){
								$(prev).append($(rngContents.childNodes[0]))
							}
						}
					}
					if (labelText == ''){
						$(getprenode).remove();
						tinyMCE.activeEditor.selection.setContent($('.autoCiteSuggestion').attr('data-text-rng'));
					}else{
						$(getprenode).attr('data-citation-string', dataCiteString).html(labelText);
					}
				}else{
					editor.selection.setRng(rng);
					if (labelText == ''){
						tinyMCE.activeEditor.selection.setContent($('.autoCiteSuggestion').attr('data-text-rng'));
					}else{
						tinyMCE.activeEditor.selection.setContent("<span class='"+citeClass+"' data-citation-string=' "+ dataCiteString +" ' data-cite-type='insert'>"+ labelText +"</span> ");
						var getprenode = tinyMCE.activeEditor.selection.getNode();
						if ($(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]').length >0){
							getprenode = $(tinymce.activeEditor.selection.getNode()).find('[class*="Ref"]')[0];
						}
					}
					//setStart(getprenode, 0);
					//setEnd(getprenode, getprenode.textContent.length);
				}
				editor.selection.collapse();
			});
			
        }else{
			if (! ((prevMatches) && (/^[\s\,\;]+[a-z]*[\s,\,\;]*$/.test(rng.toString())))){
				$('.autoCiteSuggestion').remove(); 
			}
			text = text.replace('\\[', '[');
			text = text.replace('\\(', '(');
			text = text.replace('\\)', ')');
			text = text.replace('\\]', ']');
			if (/^[a-z][a-z]+[\s,\,\;]+$|^[\[\(][0-9]+[\)\]]$/i.test(rng.toString())){
				getReferenceCitations(rng, text, prevMatches);
			}
			
			if ((prevMatches) && (/^[\,\-\u2013]*[\s\u00A0]*[0-9]+$/i.test(rng.toString()))){
				//setStart(endContainer, 0);
				if (/[\s\u00A0]$/.test(rng.toString())){
					start -= 1;
					setEnd(endContainer, start);
				}
				editor.selection.setRng(rng);
				if ($(tinyMCE.activeEditor.selection.getNode()).hasClass('ins')){
					if (tinyMCE.activeEditor.selection.getNode().textContent == rng.toString()){
						var node = tinyMCE.activeEditor.selection.getNode();
						setStart(node, 0);
						editor.selection.setRng(rng);
					}
				}
				var getRIDNode = $('<span class="'+$(prev).attr('class')+'">' + prev.textContent + rng.toString() + '</span>');
				commonjs.general.updateCitationData(getRIDNode, false);
				if (getRIDNode.attr('data-citation-string') != undefined){
					$(prev).attr('data-citation-string', getRIDNode.attr('data-citation-string'));
					$(prev).attr('data-cite-type', 'insert');
					if ($(tinyMCE.activeEditor.selection.getNode()).find(prev).length > 0){
						var rngContents = rng.extractContents();
						var ecl = rngContents.childNodes.length;
						for (var ec = 0; ec < ecl; ec++){
							$(prev).append($(rngContents.childNodes[0]))
						}
					}else if (rng.commonAncestorContainer.textContent == rng.toString()){
						$(prev).append($(tinyMCE.activeEditor.selection.getNode()))
					}else{
						//tinyMCE.activeEditor.selection.setContent("<span class='jrnlFigRef' data-citation-string=' "+ getRIDNode.attr('data-citation-string')+" '>" + $(prev).html() + tinyMCE.activeEditor.selection.getContent({format : 'html'}) + "</span>");
						var rngContents = rng.extractContents();
						var ecl = rngContents.childNodes.length;
						for (var ec = 0; ec < ecl; ec++){
							$(prev).append($(rngContents.childNodes[0]))
						}
					}
				}
				tinyMCE.activeEditor.selection.setCursorLocation(prev, prev.childNodes.length)
				editor.selection.collapse(false);
			}
		
			autoCiteTriggered = false;
		}
	}
});
